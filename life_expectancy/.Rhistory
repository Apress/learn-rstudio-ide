geom_bar(position = "dodge")
ggplotly(p)
p <-
expectancy %>%
filter(race == "All Races") %>%
ggplot(aes(year, life_expectancy)) +
geom_line(aes(color = sex))
ggplotly(p)
expectancy %>%
filter(race == "All Races") %>%
ggplot(aes(year, life_expectancy)) +
geom_line(aes(color = sex)) %>%
ggplotly
expectancy %>%
filter(race == "All Races") %>%
ggplot(aes(year, life_expectancy)) +
geom_line(aes(color = sex))
ggplotly()
expectancy %>%
filter(race == "All Races") %>%
ggplot(aes(year, life_expectancy)) +
geom_line(aes(color = sex)) %>%
ggplotly()
expectancy %>%
filter(race == "All Races") %>%
ggplot(aes(year, life_expectancy)) +
geom_line(aes(color = sex)) +
ggplotly()
expectancy %>%
filter(race == "All Races") %>%
ggplot(aes(year, life_expectancy)) +
geom_line(aes(color = sex)) %>%
ggplotly()
i_plot <-
expectancy %>%
filter(race == "All Races") %>%
ggplot(aes(year, life_expectancy)) +
geom_line(aes(color = sex))
ggplotly(i_plot)
library(DT)
datatable(expectancy,
options = list(pageLength = 5))
install.packages("DT")
library(DT)
datatable(expectancy,
options = list(pageLength = 5))
?datatable
library(DT)
datatable(expectancy,
options = list(pageLength = 10))
r2d3::r2d3("d3_plot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("d3_plot.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
data <- expectancy$death_rate
source("d3_plot.js")
library(r2d3)
r2d3(data = expectancy$death_rate,
script = "d3_plot")
r2d3(data = expectancy$death_rate,
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
r2d3(data = d3_data$death_rate[1:3],
script = "d3_plot.js")
r2d3(data = d3_data$death_rate[1:3],
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate[1:3],
script = "d3_plot.js")
r2d3(data = 1:3,
script = "d3_plot.js")
r2d3(data = .1:.3,
script = "d3_plot.js")
r2d3(data = .1:.3,
script = "d3_plot.js")
r2d3(data = c(.1,.3),
script = "d3_plot.js")
r2d3(data = c(1,3),
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = c(1,3),
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = c(1,3),
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = c(1,3),
script = "d3_plot.js")
r2d3(data = c(1,3),
script = "d3_plot.js")
script = "d3_plot.js")
r2d3(data = c(.1,.3),
script = "d3_plot.js")
r2d3(data = c(.1,.3),
script = "d3_plot.js")
r2d3(data = c(89,.56),
script = "d3_plot.js")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
d3_data <-
expectancy %>%
filter(race == "All Races",
sex == "Both Sexes")
r2d3(data = d3_data$death_rate,
script = "d3_plot.js")
d3_data$death_rate,
d3_data$death_rate
r2d3(data = d3_data$life_expectancy,
script = "d3_plot.js")
r2d3(data = d3_data$life_expectancy,
script = "d3_plot.js")
d3_data$life_expectancy
r2d3(data = d3_data$life_expectancy,
script = "d3_plot.js")
r2d3(data = d3_data$life_expectancy,
script = "d3_plot.js")
r2d3(data = d3_data$life_expectancy,
script = "d3_plot.js")
r2d3(data = d3_data$life_expectancy,
script = "d3_plot.js")
library(r2d3)
r2d3(data = c(1,2,3,4),
script = "d3_plot.js")
library(r2d3)
r2d3(data = c(1,2,3,4),
script = "d3_plot.js")
r2d3(data = c(.1,.2,.3,.4),
script = "d3_plot.js")
r2d3(data = c(.1,.2,.3,.4, .3, .2, .1),
script = "d3_plot.js")
d <- c(.1,.2,.3,.4,.3,.2,.1)
r2d3(data = d,
script = "d3_plot.js")
d <- c(.1,.2,.3,.4,.3,.4,.1)
?r2d3
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/04/life_expectancy/process_data.R')
library(readr)
dataset <- read_csv(NULL)
View(dataset)
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/04/life_expectancy/process_data.R')
View(expectancy)
shiny::runApp('test_it')
runApp('test_it')
shiny::runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
?fluidPage
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
?sliderInput
?server
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/process_data.R')
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/tidyverse.R')
View(expectancy)
save(expectancy, file = "life_expectancy_web_app/expectancy.rdata")
shiny::runApp('life_expectancy_web_app')
expectancy %>% head()
runApp('life_expectancy_web_app')
expectancy %>% head()
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
faithful %>% head()
load("expectancy.rdata")
expectancy <-
expectancy %>%
filter(!is.na(life_expectancy))
# generate bins based on
# input$bins from ui.R
x  <- expectancy[, 4]
print(x)
bins <- seq(min(x), max(x),
length.out = input$bins + 1)
bins <- seq(min(x), max(x),
length.out = 5)
hist(x, breaks = bins,
col = 'darkgray',
border = 'white')
class(x)
hist(x$life_expectancy, breaks = bins,
col = 'darkgray',
border = 'white')
bins <- seq(min(x), max(x),
length.out = 15)
hist(x$life_expectancy, breaks = bins,
col = 'darkgray',
border = 'white')
x  <- expectancy %>%
select(life_expectancy)
x
x  <- expectancy %>%
select(life_expectancy) %>%
as.vector()
x
print(x)
bins <- seq(min(x), max(x),
length.out = input$bins + 1)
# draw the histogram with the
# specified number of bins
hist(x, breaks = bins,
col = 'darkgray',
border = 'white')
x  <- expectancy$life_expectancy)
bins <- seq(min(x), max(x),
length.out = input$bins + 1)
# draw the histogram with the
# specified number of bins
hist(x, breaks = bins,
col = 'darkgray',
border = 'white')
x  <- expectancy$life_expectancy
bins <- seq(min(x), max(x),
length.out = input$bins + 1)
# draw the histogram with the
# specified number of bins
hist(x, breaks = bins,
col = 'darkgray',
border = 'white')
load("expectancy.rdata")
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
runApp('life_expectancy_web_app')
debugSource('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/data_visualization.R')
debugSource('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/process_data.R')
i
i
i
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/process_data.R')
i
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/process_data.R')
debugSource('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/data_exploration.R')
View(trend)
git add .
debugSource('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/debugger_demo.R')
debugSource('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/debugger_demo.R')
debugSource('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/debugger_demo.R')
print_i()
debugSource('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/debugger_demo.R')
print_i()
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/r_tutorial.R')
x <- "string"
class(x)
x <- function(){return ("Y")}
x
x()
x <- c(1,2,3)
x
class(x)
a <- 9
a
class(a)
class(a) <- "single_num"
class(a)
x <- function(){return ("Y")}
class(x)
x
x <- function(){return ("Hello Function")}
class(x)
x
x()
?purrr
install.packages("purrr")
pur
# CHARACTER OBJECT
b <- "nine"
b
class(b)
*2
b * 2
b + "D"
stringr::
stringr::str_glue(b, "AA")
str_glue(b, " times 2")
library(stringr)
str_glue(b, " times 2")
cards <- c("Jack", "Queen", "King", "Ace")
cards
class(cards)
alpha <- c("A", "B", "C", "D", "E")
alpha
class(alpha)
alpha[1]
alpha[5]
n <- c(20,30,40,50,60)
n
n <- c(20,30,40,50,60)
n
n * 4
m <- c(1,2,3,4,5,6,7,8,9)
dim(m) <- 3
dim(m) <- c(3,3)
m
m[2, 1]
l <- list()
l <- list()
l$f <- function(){return ("Hello Function")}
l$f()
l <- list()
l$name <- "Cards"
l$cards <- c("10","Jack","Queen","King","Ace")
l$bets <- c(1,5,10)
l$cards[2]
sex <- factor(c("male","female","unknown","male"))
sex
labels <- data.frame(
~key, ~new_label,
"Both Sexes",   "All Genders",
"Female",   "Identifies Female",
"Male",   "Identifies Male"
)
df <- data.frame()
df <- data.frame(numbers = c(1,2,3),
letters = c("A","B","C"))
df
class(df$numbers)
df <- data.frame(numbers = c(1,2,3),
letters = c("A","B","C"))
df$more <- c("1st","2nd","3rd")
df
state <- "startup"
if(state == "startup") {
print("We are about to start the program")
state = "running program"
} else {
print("Program running")
}
ifelse(state == "startup",
print("We are about to start the program"),
print("Program running"))
state <- "startup"
ifelse(state == "startup",
print("We are about to start the program"),
print("Program running"))
ifelse(state == "startup",
print("We are about to start the program"),
print("Program running"))
ifelse(state == "startup",
print("We are about to start the program"),
print("Program running"))
ifelse(state == "startup", true, false)
true
ifelse(state == "startup", TRUE, FALSE)
for (i in 1:5){
print(i)
}
for (i in 1 to 5){
print(i)
}
for (i in 1:5){
print(i)
}
source('~/Dropbox/business/projects/rstudio_ide_quick_reference/code/life_expectancy/process_data.R')
jsonlite::toJSON(expectancy)
library(jsonlite)
life_json <- jsonlite::toJSON(expectancy)
d <- fromJSON(life_json)
life_json
life_json <- toJSON(expectancy) %>% head()
library(tidyverse)
library(jsonlite)
life_json <- toJSON(expectancy) %>% head()
d <- fromJSON(life_json)
life_json <- toJSON(expectancy) %>% head()
library(tidyverse)
library(jsonlite)
life_json <- expectancy() %>%
head() %>%
toJSON()
life_json <- expectancy %>%
head() %>%
toJSON()
d <- fromJSON(life_json)
life_json
class(d)
life_json <- expectancy %>%
head() %>%
toJSON()
life_json
install.packages("jsonlite")
library(tidyverse)
library(jsonlite)
life_json <- expectancy %>%
head() %>%
toJSON()
life <- fromJSON(life_json)
life
do{
print(i)
i++
} while (i < 10)
while(i < 10) {
print(i)
i++
}
while (i < 10) {
print(i)
i <- i + 1
}
while (i=0;i < 10) {
print(i)
i <- i + 1
}
while (i < 10) {
print(i)
i <- i + 1
}
i <- 1
while (i < 10) {
print(i)
i <- i + 1
}
i <- 1
while (i <= 10) {
print(i)
i <- i + 1
}
while (i <= 10) {
print(i)
i <- i + 1
}
i <- -10
while (i <= 10) {
print(i)
i <- i + 1
}
i <- 0
do {
print(i)
i <- i + 1
} while (i <= 5)
{
print(i)
i <- i + 1
} while (i <= 5)
lapply(1:5, function(){print(x)})
lapply(1:5, function(){print("x")})
lapply(1:5, function(x){print(x)})
sapply(1:5, function(x){print(x)})
sapply(1:5, function(x){x * 2})
result <- sapply(1:5, function(x){x * 2})
result <- sapply(1:5, function(x){return(x * 2)})
result <- 1:5
result <- result * 2
sapply(1:5, function(x){x})
sapply(1:5, function(x){print(x)})
replicate(1:5, print(x))
replicate(1:5, function(x){print(x)})
sapply(1:5, function(x){
x * 2
})
my_fun <- function(x, y) {
r = x * 2 + y
r
}
my_fun()
my_fun
my_fun(3, 189)
